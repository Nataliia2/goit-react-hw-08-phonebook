{"version":3,"file":"static/js/38.5fdc8cbf.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styles.js","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.style.js","components/Form/Form.jsx","components/ContactsFilter/ContactFilter.styles.js","components/ContactsFilter/ContactFilter.jsx","pages/contactPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  font-weight: bold;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  background-color: #aec4e2;\n  border: #9db6da;\n  padding: 5px;\n  cursor: pointer;\n  :hover,\n  :focus {\n    background-color: #4f94f3;\n  }\n`;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getFilter, getError, getIsLoading } from '../../redux/selector';\nimport { deleteContact, fetchContact } from '../../redux/contacts/contactsOpetations';\nimport { List, Item, Button } from './ContactList.styles';\nimport Loader from '../Loder';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(getFilter);\n  const error = useSelector(getError);\n  const loading = useSelector(getIsLoading);\n\n  useEffect(() => { dispatch(fetchContact()) }, [dispatch]);\n    \n  const itemList = items.map(({ id, name, number }) => {\n      return (\n        <Item key={id}>\n          {name}: {number}\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Button>\n        </Item>\n      );\n    });\n  \n    return <>\n    {error && <p>{error.message}</p>}\n    {loading && <Loader>Загружаем</Loader>}\n    <List>{itemList}</List>;\n    </>\n  };\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  background-color: #e2e2e2;\n  border: 1px solid black;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 20px;\n  padding: 20px;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 280px;\n  padding: 5px;\n  margin-bottom: 10px;\n`;\nexport const Button = styled.button`\n  width: 100px;\n  background-color: #aec4e2;\n  border: transparent;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 5px;\n  cursor: pointer;\n  :hover,\n  :focus {\n    background-color: #4f94f3;\n  }\n`;","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOpetations';\nimport { getContacts } from '../../redux/selector';\nimport { Form, Label, Input, Button } from './Form.style';\n\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const isDublicate = ({ name }) => {\n    const result = contacts.find(item => item.name === name);\n    return result;\n  };\n\n\n  const submitContacts = evt => {\n    evt.preventDefault();\n\n    const data = {name, number};\n    \n    if (isDublicate(data)) {\n      return alert(`${data.name} is already in contacts `);\n    }\n    dispatch(addContact({ name, phone: number }));\n    setName('');\n    setNumber('');\n  };\n\n  const inputChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\nreturn (\n      <Form onSubmit={submitContacts}>\n        <Label htmlFor={nameId}>Name</Label>\n        <Input\n          autoComplete=\"off\"\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={inputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <Label htmlFor={numberId}>Number</Label>\n        <Input\n          autoComplete=\"off\"\n          id={numberId}\n          value={number}\n          onChange={inputChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    );\n  }\n\n    ","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  font-weight: bold;\n  width: 300px;\n  margin-right: auto;\n  margin-left: auto;\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { setContactFilter } from '../../redux/FilterSlice';\nimport { getStatusFilter } from '../../redux/selector';\nimport { Wrapper } from './ContactFilter.styles';\nimport { Label, Input } from 'components/Form/Form.style';\n\nexport const FilterContact = () => {\n  const value = useSelector(getStatusFilter);\n  const dispatch = useDispatch();\n  \n  const onChange = ev => {\n    dispatch(setContactFilter(ev.currentTarget.value));\n\n  };\n\n  return (\n    <Wrapper>\n      <Label>Find contacts by name</Label>\n      <Input\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        required\n      />\n    </Wrapper>\n  );\n}\n","import React from 'react'\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/Form/Form';\nimport { FilterContact } from '../components/ContactsFilter/ContactFilter';\nimport { Container } from '../components/App/App.styles';\n\n\nexport default function Contacts() {\n \n  return (\n      <div>\n        <Container>\n             <h1>Phonebook</h1>\n            <ContactForm />\n\n            <h2>Contacts</h2>\n            <FilterContact  />\n            <ContactList />\n        </Container>\n      </div>\n  )\n}"],"names":["List","styled","Item","Button","ContactList","dispatch","useDispatch","items","useSelector","getFilter","error","getError","loading","getIsLoading","useEffect","fetchContact","itemList","map","id","name","number","type","onClick","deleteContact","message","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","Label","Input","ContactForm","contacts","getContacts","useState","setName","setNumber","nameId","numberId","inputChange","evt","currentTarget","value","onSubmit","preventDefault","data","find","item","isDublicate","alert","addContact","phone","htmlFor","autoComplete","onChange","pattern","title","required","Wrapper","FilterContact","getStatusFilter","ev","setContactFilter","Contacts","Container"],"sourceRoot":""}